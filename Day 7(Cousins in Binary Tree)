/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, int x, int y, int depth,TreeNode* parent,unordered_map<TreeNode*,int> &xinfo,unordered_map<TreeNode*,int>&yinfo)
    {
        if(root==NULL) return;
        if(root->val==x)
        {
            xinfo[parent]=depth;
        }
        if(root->val==y)
        {
           yinfo[parent]=depth;
        }
        dfs(root->left,x,y,depth+1,root,xinfo,yinfo);
        dfs(root->right,x,y,depth+1,root,xinfo,yinfo);
    }
    bool isCousins(TreeNode* root, int x, int y) {
        unordered_map<TreeNode*,int> xinfo;
        unordered_map<TreeNode*,int> yinfo;
        TreeNode* parent = NULL;
        int depth = 0;
        if(root==NULL) return false;
        
        dfs(root,x,y,0,NULL,xinfo,yinfo);
        unordered_map<TreeNode*,int>:: iterator it1;
        unordered_map<TreeNode*,int>::iterator it2;
        it1=xinfo.begin();
        it2=yinfo.begin();
        return ((it1->first!=it2->first) and (it1->second==it2->second));
    }
};
